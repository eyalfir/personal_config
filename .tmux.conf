set-option -g prefix C-b
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-logging'
set -g @logging-path $HOME/.tmux_sessions
set -g default-command ~/personal_config/bin/logged_bash
set -g @plugin 'Morantron/tmux-fingers'
set -g @fingers-compact-hints '1'
set -g @fingers-hint-format "#[fg=red,bold]%s"
set -g @fingers-commands "OPEN|xargs open|fg=white,bg=red"
set -g @fingers-default-command "0"

# fix Home End buttons not working in tmux
bind -n End send-key C-e
bind -n Home send-key C-a

# colors, pretty colors
TMUX_DARK="\#333333"
TMUX_LIGHT="\#EEEEEE"
TMUX_ACCENT="\#75507B"
TMUX_HIGHLIGHT="\#DD4814"
TMUX_DARK=colour235
set-option -g pane-active-border-bg $TMUX_HIGHLIGHT
set-option -g pane-active-border-fg $TMUX_HIGHLIGHT
set-option -g pane-border-fg $TMUX_ACCENT
set-option -g display-panes-colour $TMUX_ACCENT
set-option -g display-panes-active-colour $TMUX_HIGHLIGHT
set-option -g clock-mode-colour $TMUX_ACCENT
set-option -g mode-bg $TMUX_ACCENT
set-option -g mode-fg $TMUX_LIGHT
set -g message-bg $TMUX_ACCENT
set -g message-fg white
run-shell "powerline-daemon -q"
source /usr/local/lib/python2.7/site-packages/powerline/bindings/tmux/powerline.conf


### workaround for neovim issue #2048 unable to map C-h
# bind -n C-h run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-h) || tmux select-pane -L"
bind -n C-h run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-q) || tmux select-pane -L"
### end of workaround to neovim #2048

bind -n C-j run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-j) || tmux select-pane -D"
bind -n C-k run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-k) || tmux select-pane -U"
bind -n C-l run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-l) || tmux select-pane -R"
bind -n C-\ run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys 'C-\\') || tmux select-pane -l"
bind-key -n C-M-h previous-window
bind-key -n C-M-l next-window
bind-key -r C-h resize-pane -L 5
bind-key -r h resize-pane -L
bind-key -r C-l resize-pane -R 5
bind-key -r l resize-pane -R
bind-key -r C-j resize-pane -D 5
bind-key -r j resize-pane -D
bind-key -r C-k resize-pane -U 5
bind-key -r k resize-pane -U
unbind-key -n F5
bind -n C-y run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys 'C-y') || tmux send-keys C-K"
bind -n C-s run "(tmux display-message -p '#{pane_title}' | grep -iq SNS && split_and_lsync) || tmux send-keys C-S"
bind-key s split-window
bind-key S run-shell "tmux split-window \"sns $(tmux_get_current_title | grep SNS | cut -d' ' -f 2)\""
bind-key \ split-window -h
bind-key | run-shell "tmux split-window -h \"sns $(tmux_get_current_title | grep SNS | cut -d' ' -f 2)\""
#bind C-s run "(tmux display-message -p '#{pane_title}' | split_and_lsync2)"

bind-key M-k display-message 'Jiraing...'\; run-shell tmux_capture_to_jira.sh

# bind p to copy tmux buffer to Mac buffer
bind-key p save-buffer /tmp/.tmux-buffer \; run-shell "cat /tmp/.tmux-buffer | reattach-to-user-namespace pbcopy"
bind F7 run "~/bin/screen_shot_to_jira.sh"
bind-key v run-shell "tmux send-keys \"$(tmux show-environment -g this_pass | cut -d= -f2)\"; tmux send-keys Enter"
bind-key C-v command-prompt -p password: "set-environment -g this_pass '%%'"
bind-key o run-shell "tmux send-keys \"$(tmux show-environment -g this_pass2 | cut -d= -f2)\"; tmux send-keys Enter"
bind-key C-o command-prompt -p other-password: "set-environment -g this_pass2 '%%'"

bind-key r source ~/.tmux.conf\; display-message '.tmux.conf reloaded'

# set copy mode to use vi bindings
set-window-option -g mode-keys vi
# in copy-mode - use C-e to open new vim window with the selected text
bind-key -T copy-mode=vi c-e send -X copy-pipe '/Users/eyal/bin/stdin_screenshot_to_jira.sh'
bind-key -T copy-mode=vi c-p send -X copy-pipe '/Users/eyal/bin/stdin_screenshot_to_slack.sh'
bind-key -T copy-mode=vi c-o send -X copy-pipe '/Users/eyal/bin/stdin_browse_to_jira.sh'

set -g focus-events on

set-environment -g TMUX_PLUGINS_DIR /Users/eyal/personal_config/tmux_plugins
# run-shell "echo $TMUX_PLUGINS_DIR"
# run-shell "$TMUX_PLUGINS_DIR/tmux-open/open.tmux"
bind-key -r n new-window
bind-key -r C-M-H join-pane -h -s :. -t :-1
bind-key -r C-M-L break-pane
bind-key -r ) swap-window -t :+1
bind-key -r ( swap-window -t :-1

# patch to make pbpaste and pbcopy work. see https://github.com/ChrisJohnsen/tmux-MacOSX-pasteboard
#set-option -g default-command "reattach-to-user-namespace -l bash"
set -g default-command "reattach-to-user-namespace -l ~/personal_config/bin/logged_bash"

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'
set -g default-terminal "xterm-256color"
set-option -ga terminal-overrides ",xterm-256color:Tc"
