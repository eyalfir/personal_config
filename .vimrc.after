let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tagbar#enabled = 1
" diable pylint
"let g:pylint_onwrite = 0
"let g:syntastic_python_checkers=["pyflakes","pylint","python"]
let g:syntastic_python_checkers=["flake8", "pylint"]
"let g:syntastic_auto_loc_list=1
nmap cof :SyntasticToggleMode<CR>

syntax enable
set term=xterm-256color
set background=dark
source ~/Downloads/solarized-master/vim-colors-solarized/colors/solarized.vim

" Tmux vim navigator
map <silent> <C-K> :TmuxNavigateUp<CR>
map <silent> <C-J> :TmuxNavigateDown<CR>
map <silent> <C-H> :TmuxNavigateLeft<CR>
map <silent> <C-L> :TmuxNavigateRight<CR>
" <Tab> and <S-Tab> to switch between buffers
nmap <silent> ) :bnext<CR>
nmap <silent> ( :bprevious<CR>
" <Leader>r to search-replace
nmap <Leader>r :%s/\<<C-r><C-w>\>//g<Left><Left>
set nonumber

" gui options to enable using the gnome clipboard \"+ and \"* registers
set guioptions+=a


"set hidden allows switching freely between buffers
set hidden

" slimux bindings
nmap <Leader>s :SlimuxREPLSendLine<CR>
nmap <Leader>cs :SlimuxREPLConfigure<CR>
" send reload(module_name) when pressing <Leader>im (ipython-reload)
nmap <Leader>im :call SlimuxSendCode(join(['reload(',split(split(expand("%"),"/")[-1],".py")[0],')']))<CR>
" send execfile(filename) when pressing <Leader>ir
nmap <Leader>ir :call SlimuxSendCode(join(['execfile("',expand("%"),'")'], ''))<CR>
  """ ********************
  """ enable sending %cpaste and then send code
function! GetVisualPlus() range
    let reg_save = getreg('"')
    let regtype_save = getregtype('"')
    let cb_save = &clipboard
    set clipboard&
    silent normal! ""gvy
    let selection = "%cpaste" . "\n" . getreg('"') . "--" . "\n"
    "let selection = "\n" . getreg('"') . "\n"
    call setreg('"', reg_save, regtype_save)
    let &clipboard = cb_save
    return selection
endfunction
command! -range=% -bar -nargs=* SlimuxPasteSelection call SlimuxSendCode(GetVisualPlus())
vmap <Leader>s :SlimuxPasteSelection<CR>
  """ **********************

" ipython bindings
  "<Leader>ci initializes ipython
nmap <Leader>ci :IPython<CR>:echo 'vim-ipython initiated'<CR>
nmap <Leader>is :python run_this_line()<CR>
nmap <Leader>if :python run_this_file()<CR>
vmap <Leader>is :python run_these_lines()<CR>
nmap <Leader>id :python get_doc_buffer()<CR>
nmap <Leader>ie :python send(vim.eval('expand("<cword>")'))

"cursor line hightlight
highlight CursorLine ctermbg=234 cterm=None term=None
au BufEnter * set cursorline
au BufLeave * set nocursorline

" ctrlP customization
let g:ctrlp_show_hidden = 1
let g:ctrlp_extensions = ["tag"]
silent! unmap <C-P>
nmap <C-P><C-P> :<C-U>CtrlP<CR>
nmap <C-P><C-T> :<C-U>CtrlPTag<CR>
nmap <C-P><C-O> :<C-U>CtrlPBuffer<CR>

" fugitive shortcuts
command! GCommitLog Glog -- %

" make easygrep exclude
let g:EasyGrepFilesToExclude="*tags,*pyc"

function! UpdateTags()
  call system('ctags -R')
endfunction
" au BufWritePost *.py call UpdateTags()
nmap <silent> <Leader>ct :call UpdateTags()<CR>

" \\v to Ggrep
nmap <Leader><Leader>v :Ggrep <C-r><C-w><CR><CR>:cope<CR>

" \ib to add pdb breakpoint
function! InsertSettrace()
  let br = expand("import pdb; pdb.set_trace()")
  execute "normal o".br
endfunction
nmap <Leader>ib :call InsertSettrace()<CR>

" git gutter plugin toggle, and clear SignColumn background not aligned with
" solarized colorscheme
nmap <silent> cog :GitGutterToggle<CR>
highlight clear SignColumn

set pastetoggle=
noremap <silent> cop :set paste!<CR>


" post comments to jira directly from vim using jiracli
" see https://github.com/toabctl/jiracli
vmap \j :w !jiracli --issue-comment-add 
nmap \j :%w !jiracli --issue-comment-add 
