let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tagbar#enabled = 1
" diable pylint
let g:pylint_onwrite = 0
" enable solarized colorscheme
"colorscheme solarized

set background=dark
" Tmux vim navigator
map <silent> <C-K> :TmuxNavigateUp<CR>
map <silent> <C-J> :TmuxNavigateDown<CR>
map <silent> <C-H> :TmuxNavigateLeft<CR>
map <silent> <C-L> :TmuxNavigateRight<CR>
" <Tab> and <S-Tab> to switch between buffers
nmap <silent> <Tab> :bnext<CR>
nmap <silent> <S-Tab> :bprevious<CR>
" <Leader>r to search-replace
nmap <Leader>r :%s/\<<C-r><C-w>\>//g<Left><Left>
set nonumber
set term=xterm-256color
" gui options to enable using the gnome clipboard \"+ and \"* registers
set guioptions+=a
syntax on

"set hidden allows switching freely between buffers
set hidden

" slimux bindings
nmap <Leader>s :SlimuxREPLSendLine<CR>
vmap <Leader>s :SlimuxREPLSendSelection<CR>
nmap <Leader>cs :SlimuxREPLConfigure<CR>
" send reload(module_name) when pressing <Leader>ir (ipython-reload)
nmap <Leader>ir :call SlimuxSendCode(join(['reload(',split(split(expand("%"),"/")[-1],".py")[0],')']))<CR>

" ipython bindings
  "<Leader>ci initializes ipython
nmap <Leader>ci :IPython<CR>:echo 'vim-ipython initiated'<CR>
nmap <Leader>is :python run_this_line()<CR>
nmap <Leader>if :python run_this_file()<CR>
vmap <Leader>is :python run_these_lines()<CR>
nmap <Leader>id :python get_doc_buffer()<CR>
nmap <Leader>ie :python send(vim.eval('expand("<cword>")'))

"cursor line hightlight
highlight CursorLine ctermbg=234 cterm=None term=None
au BufEnter * set cursorline
au BufLeave * set nocursorline

" ctrlP customization
let g:ctrlp_show_hidden = 1
let g:ctrlp_extensions = ["tag"]
unmap <C-P>
nmap <C-P><C-P> :<C-U>CtrlP<CR>
nmap <C-P><C-T> :<C-U>CtrlPTag<CR>
